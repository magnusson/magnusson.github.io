{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/klunsa/",
    "result": {"data":{"site":{"siteMetadata":{"title":"magnusson"}},"markdownRemark":{"html":"<p>I've been coding a rock paper scissor game and wanted to write a bit about the development of it.</p>\n<h2>Firebase</h2>\n<p>I decided to make a game to be able to make good use of the real-time database from <a href=\"https://firebase.google.com/\">Firebase</a>.\r\nIt was surprisingly easy to set up and use. Using the firebase package all I needed to do was entering my application keys and I was up and running.</p>\n<pre><code class=\"language-js\">import * as firebase from 'firebase/app'\r\nimport 'firebase/database'\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n})\r\n\r\nexport default firebaseApp\n</code></pre>\n<p>With the firebase connection set up all I had to do to get the data from the database is to set a up a ref to the data.\r\nThis creates an ref to the players object in a lobby with a <code>gameId</code>.</p>\n<pre><code class=\"language-js\">const playersRef = firebaseApp.database().ref(`${gameId}/players`)\n</code></pre>\n<p>With the ref available I use two functions <code>.once()</code> and <code>.on()</code>.\r\n<code>.once()</code> is used to fetch the data from the database if there already is someone in the lobby and updates the state with the current players.\r\nUsing <code>.on()</code> works like a listener for changes on the reference. When a player joins the lobby we update the state and can start the game.</p>\n<p>I started using <a href=\"https://github.com/tylermcginnis/re-base\" target=\"_blank\" rel=\"noreferrer\">re-base</a> but decided against it because I wanted to try using only the Firebase API.\r\nUsing re-base you could simplify the code quite a bit using <a href=\"https://github.com/tylermcginnis/re-base#syncstateendpoint-options\" target=\"_blank\" rel=\"noreferrer\"><code>syncState</code></a>.\r\nThis is what I probably will use if I decide to refactor this some day.</p>\n<h2>React Hooks</h2>\n<p>Another reason for this project was to get used to using the somewhat new Hooks API.\r\nWhen I first started using Hooks I was really impressed with how much cleaned the code looks. I think this <a href=\"https://twitter.com/threepointone/status/1056594421079261185\" target=\"_blank\" rel=\"noreferrer\">tweet</a> really shows how big of a difference it makes.\r\nThere are a few gotchas when moving away from the life cycle methods in classes and instead using <code>useEffect</code> to get the same effect.</p>\n<p>One thing I had issues with using hooks is that when I tried to write test using <a href=\"https://github.com/airbnb/enzyme\" target=\"_blank\" rel=\"noreferrer\">enzyme</a> it does not yet have full support for it. So I've had to put that on hold until a later date.</p>\n<h2>Try it out</h2>\n<p>The game is currently hosted on Netlify which is also the first time I've used it and I really enjoy the simplicity of setting up a site in no time. I think it was about three click to get the site up and running from my GitHub repo.\r\nYou can try it out at <a href=\"https://klunsa.magnusson.dev/\" target=\"_blank\" rel=\"noreferrer\">klunsa.magnusson.dev</a>.<br />\r\nJust send the link to a friend or open it in a new tab to play against yourself.\r\nThere is still much to be done about the design of the game but since it is in a working state I wanted to get it up and write a bit about the process so far.</p>\n<p>The name Klunsa is a swedish slang for rock–paper–scissors.</p>","frontmatter":{"title":"Klunsa ✊✋✌"}}},"pageContext":{"slug":"/klunsa/"}},
    "staticQueryHashes": ["3649515864"]}